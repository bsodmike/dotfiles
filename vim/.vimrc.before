filetype off
filetype plugin indent off
set runtimepath+=$GOROOT/misc/vim
filetype plugin indent on

augroup vimrcEx
  autocmd!

  " Auto remove whitespace on buffer save
  autocmd BufWrite * mark ' | silent! %s/\s\+$// | norm ''

  " When editing a file, always jump to the last known cursor position.
  " Don't do it for commit messages, when the position is invalid, or when
  " inside an event handler (happens when dropping a file on gvim).
  autocmd BufReadPost *
    \ if &ft != 'gitcommit' && line("'\"") > 0 && line("'\"") <= line("$") |
    \   exe "normal g`\"" |
    \ endif

  " Set syntax highlighting for specific file types
  autocmd BufRead,BufNewFile *.md set filetype=markdown
  autocmd BufRead,BufNewFile .{jscs,jshint,eslint}rc set filetype=json

  " Enable spellchecking for Markdown
  autocmd FileType markdown setlocal spell

  " Automatically wrap at 80 characters for Markdown
  autocmd BufRead,BufNewFile *.md setlocal textwidth=80

  " Automatically wrap at 72 characters and spell check git commit messages
  autocmd FileType gitcommit setlocal textwidth=72
  autocmd FileType gitcommit setlocal spell

  " Recognise ES6 file extension as JavaScript
  autocmd BufRead,BufNewFile *.es6 setfiletype javascript

  " Allow stylesheets to autocomplete hyphenated words
  autocmd FileType css,scss,sass setlocal iskeyword+=-
augroup END

" Basic Settings ----------------------- {{{
set autoindent
set nocompatible
set modelines=0
"set guifont=Inconsolata:h22
set guifont=Hack:h20
" Tab settings
set tabstop=2
set shiftwidth=2
set softtabstop=2
set expandtab
set encoding=utf-8
set scrolloff=3
set termencoding=utf-8
set showmode
set showcmd
set hidden
set wildmenu
set wildmode=list:longest
set visualbell
set cursorline
"set cursorcolumn
set ttyfast
set ruler
set backspace=indent,eol,start
set laststatus=2
set relativenumber
set undofile
" Ignorecase and smartcase together make Vim deal with
" case-sensitive search intelligently. If you search for an
" all-lowercase string your search will be case-insensitive,
" but if one or more characters is uppercase the search will be
" case-sensitive. Most of the time this does what you want.
set ignorecase
set smartcase
" Note that gdefault applies substitutions globally on lines. For example,
" instead of :%s/foo/bar/g you just type :%s/foo/bar/. This is
" almost always what you want (when was the last time you wanted
" to only replace the first occurrence of a word on a line?) and
" if you need the previous behavior you just tack on the g again.
"set gdefault
" Incsearch, showmatch and hlsearch work together to highlight
" search results (as you type). It's really quite handy, as long
" as you have the next line as well.
set incsearch
set showmatch
set hlsearch
" Show invisible chars
" This makes Vim show invisible characters with the same
" characters that TextMate uses. You might need to adjust your
" color scheme so they're not too distracting.
set list
set listchars=tab:▸\ ,eol:¬,extends:›,precedes:‹,nbsp:·,trail:·
" }}}

" Custom Mappings ---------------------- {{{
" Change the leader key : namespace of customization
let mapleader = ","
" For search
" The first two lines fix Vim's horribly broken default regex
" handling by automatically inserting a \v before any string
" you search for. This turns off Vim's crazy default regex
" characters and makes searches use normal regexes. I already
" know Perl/Python compatible regex formatting, why would I
" want to learn another scheme?
nnoremap / /\v
vnoremap / /\v

nnoremap <leader><space> :noh<cr>
nnoremap <tab> %
vnoremap <tab> %

nnoremap ; :
nnoremap <up> <nop>
nnoremap <down> <nop>
nnoremap <left> <nop>
nnoremap <right> <nop>
inoremap <up> <nop>
inoremap <down> <nop>
inoremap <left> <nop>
inoremap <right> <nop>
nnoremap j gj
nnoremap k gk

inoremap <F1> <ESC>
nnoremap <F1> <ESC>
vnoremap <F1> <ESC>
" }}}

au FocusLost * silent! :wa

" Strip all trailing whitespace in the current file
nnoremap <leader>W :%s/\s\+$//<cr>:let @/=''<CR>

" Search with Ack
nnoremap <leader>a :Ag

" Fold HTML tags
nnoremap <leader>ft Vatzf

" Sort CSS properties
nnoremap <leader>S ?{<CR>jV/^\s*\}?$<CR>k:sort<CR>:noh<CR>
nnoremap <leader>q gqip

" Reselect text i just pasted
nnoremap <leader>v V`]

" This last mapping lets me quickly open up my ~/.vimrc file
" in a vertically split window so I can add new things to it
" on the fly.
nnoremap <leader>ev <C-w><C-v><C-l>:e $MYVIMRC<cr>

" Add quotes around current word
nnoremap <leader>" viw<esc>a"<esc>hbi"<esc>lel

inoremap jj <ESC>

" Quicker window movement
nnoremap <leader>w <C-w>v<C-w>l
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

" ZoomWin configuration
map <Leader><Leader> :ZoomWin<CR>

" Index ctags from any project, including those outside Rails
map <Leader>ct :!ctags -R .<CR>

" NERDTree configuration
let NERDChristmasTree=1
let NERDTreeShowHidden=1

" For vim-indent-guides
let g:indent_guides_enable_on_vim_startup = 1

" Easier split navigations
set splitbelow
set splitright

" Configure syntastic syntax checking to check on open as well as save
let g:syntastic_check_on_open=1
let g:syntastic_html_tidy_ignore_errors=[" proprietary attribute \"ng-"]
let g:syntastic_eruby_ruby_quiet_messages =
    \ {"regex": "possibly useless use of a variable in void context"}

" Autocomplete with dictionary words when spell check is on
set complete+=kspell

" Get off my lawn
nnoremap <Left> :echoe "Use h"<CR>
nnoremap <Right> :echoe "Use l"<CR>
nnoremap <Up> :echoe "Use k"<CR>
nnoremap <Down> :echoe "Use j"<CR>
